CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(255)                            NOT NULL,
    email VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (id),
    CONSTRAINT uc_users_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS items
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name        VARCHAR(255)                            NOT NULL,
    description VARCHAR(255)                            NOT NULL,
    available   BOOLEAN                                 NOT NULL,
    owner       BIGINT                                  NOT NULL,
    request     BIGINT,
    CONSTRAINT pk_items PRIMARY KEY (id),
    CONSTRAINT FK_ITEMS_ON_USER FOREIGN KEY (owner) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS bookings
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start     TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    finish    TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    item      BIGINT                                  NOT NULL,
    booker    BIGINT                                  NOT NULL,
    status    SMALLINT                                NOT NULL,
    CONSTRAINT pk_bookings PRIMARY KEY (id),
    CONSTRAINT FK_BOOKINGS_ON_BOOKER FOREIGN KEY (booker) REFERENCES users (id),
    CONSTRAINT FK_BOOKINGS_ON_ITEM FOREIGN KEY (item) REFERENCES items (id),
    CONSTRAINT uc_bookings_item_booker UNIQUE (item, booker)
);

CREATE TABLE IF NOT EXISTS comments
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY     NOT NULL,
    item        BIGINT                                      NOT NULL,
    author      BIGINT                                      NOT NULL,
    comment     VARCHAR(1024)                               NOT NULL,
    created     TIMESTAMP WITHOUT TIME ZONE                 NOT NULL,
    CONSTRAINT pk_comments PRIMARY KEY (id),
    CONSTRAINT FK_COMMENTS_ON_ITEM FOREIGN KEY (item) REFERENCES items (id),
    CONSTRAINT FK_COMMENTS_ON_AUTHOR FOREIGN KEY (author) REFERENCES users (id)
);
